// Generated by CoffeeScript 1.9.0
var compileCoffee, compileJade, compileTemplates, compiler, cp, fs, path;

fs = require('fs');

path = require('path');

cp = require('child_process');

compiler = require('./js/libs/ember-template-compiler-1.10.0');

compileCoffee = function(filename) {
  console.log('compileCoffee', filename);
  return cp.spawn('coffee', ['-cb', filename]);
};

compileJade = function(filename) {
  var ext;
  console.log('compileJade', filename);
  ext = /index/.test(filename) ? 'html' : 'hbs';
  return cp.spawn('jade', ['-E', ext, '-P', filename]);
};

compileTemplates = function(filename) {
  var filenames, input, name, output, template, _i, _len;
  console.log('compiling templates...');
  if (/index/.test(filename)) {
    return;
  }
  output = '';
  filenames = fs.readdirSync('hbs').filter(function(filename) {
    return /hbs/.test(filename);
  }).map(function(filename) {
    return 'hbs/' + filename;
  });
  console.log('filenames', filenames);
  for (_i = 0, _len = filenames.length; _i < _len; _i++) {
    filename = filenames[_i];
    template = fs.readFileSync(filename).toString();
    input = compiler.precompile(template).toString();
    name = path.parse(filename).name;
    output += "Ember.TEMPLATES['" + name + "'] = Ember.Handlebars.template(" + input + ");";
  }
  return fs.writeFileSync('templates.js', output, {
    encoding: 'utf8'
  });
};

fs.watch('./', {
  recursive: true
}, function(event, filename) {
  if (event === 'change') {
    switch (path.parse(filename).ext) {
      case '.coffee':
        return compileCoffee(filename);
      case '.jade':
        return compileJade(filename);
      case '.hbs':
        return compileTemplates(filename);
    }
  }
});
